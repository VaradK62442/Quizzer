[
    {
        "question": "In Django, how do you get a list of all objects from a model?",
        "answer": "Model.objects.all()"
    },

    {
        "question": "In Django, given an instance of a model, how do you add it to the database?",
        "answer": "instance.save()"
    },
    {
        "question": "In Django, given an instance of a model, how do you delete from the database?",
        "answer": "instance.delete()"
    },
    {
        "question": "In Django, how do you get a list of objects that meet certain criteria?",
        "answer": "Model.objects.filter(attribute = value)"
    },
    {
        "question": "In Django, how do you get a single object from a model matching a certain criteria?",
        "answer": "Model.objects.get(attribute = value)"
    },

    {
        "question": "In Django, what does each view in the views.py file do?",
        "answer": "Each view is a function that takes a HttpRequest object and returns a HttpResponse object."
    },

    {
        "question": "In Django, what does the path function do?",
        "answer": "It maps a URL to a view."
    },
    {
        "question": "In Django, the parameters of the path function are 'route', 'view', and 'name'. What do they do?",
        "answer": "Route is the URL, view is the view function, and name is the name of the URL."
    },

    {
        "question": "What are the three main components of an Entity Relationship Model?",
        "answer": "Entities, attributes, and relationships."
    },
    {
        "question": "What is the difference between Chen notation and Compressed Chen notation?",
        "answer": "Chen notation has bubbles for each attribute of an entity, while compressed Chen notation has the attributes listed inside the entity box."
    },
    {
        "question": "In Django, what is the syntax for creating a new model?",
        "answer": "class ModelName(models.Model): attribute = models.AttributeField(params)"
    },

    {
        "question": "What complexity does the hypertext structure present?",
        "answer": "Need to avoid user disorientation, and provide a clear path for navigation."
    },
    {
        "question": "What complexity does the presentation / user interface present?",
        "answer": "Needs to be self explanatory, aesthetically pleasing, and adaptable to different contexts."
    },
    {
        "question": "What complexity does content delivery present?",
        "answer": "Need to be fast, up-to-date, consistent, secure, and reliable."
    },

    {
        "question": "What are the different types of web apps?",
        "answer": "Static, interactive, transactional, workflow-based, portal oriented, collaborative, social web, mobile, and ubiquitous."
    },

    {
        "question": "What is a monolithic program?",
        "answer": "A single unit in which every aspect of the application is coded."
    },
    {
        "question": "What are the main tasks that any application must support?",
        "answer": "UI management, business logic, information manipulation, and data storage."
    },
    {
        "question": "What is a tiered architecture?",
        "answer": "A way to separate the different tasks of an application into different layers."
    },

    {
        "question": "Describe the fat client architecture.",
        "answer": "The user interacts with the client, which interacts with the database. The client handles user interface, methods, and functionality."
    },
    {
        "question": "What are some potential issues with a two tier system?",
        "answer": "Load is put on the client, and might tie client software to the database."
    },
    {
        "question": "Describe the thin client architecture.",
        "answer": "The user interacts with the client, which interacts with the server. The client handles contents and presentation."
    },
    {
        "question": "Describe a three tier architecture.",
        "answer": "The user interacts with the client, which interacts with middleware, which interacts with the database. The middleware handles business logic."
    },
    {
        "question": "What are two ways that load balancing can be achieved?",
        "answer": "By using Domain Name Servers or Load Balancing Servers."
    },

    {
        "question": "What is Information Architecture?",
        "answer": "The structural design of shared information."
    },
    {
        "question": "What are the fundamental questions an Information Architect seeks to answer?",
        "answer": "Who is the user? What do they need? What will they see? How will they interact with the system? How will they get value from the system?"
    },
    {
        "question": "What are the deliverables of an Information Architect?",
        "answer": "Personas, user needs matrix, wireframes, site maps, URL design, usability testing."
    },

    {
        "question": "In CSS, how are conflicts of style resolved?",
        "answer": "Every ID attribute adds a value '1,0,0', every class attribute adds a value '0,1,0' and every element adds a value '0,0,1'. This is then ordered lexicographically."
    },
    {
        "question": "In CSS, what are the four different ways of positioning?",
        "answer": "Static, relative, absolute, and fixed."
    },
    {
        "question": "In CSS, what is static positioning?",
        "answer": "The default positioning, elements are positioned according to the normal flow of the document."
    },
    {
        "question": "In CSS, what is relative positioning?",
        "answer": "Elements are positioned relative to their normal position."
    },
    {
        "question": "In CSS, what is absolute positioning?",
        "answer": "Elements are positioned relative to the nearest positioned ancestor."
    },
    {
        "question": "In CSS, what is fixed positioning?",
        "answer": "Elements are positioned relative to the browser window."
    },

    {
        "question": "What are the types of nodes in the Document Object Model?",
        "answer": "Element, attribute, text, comment, and document."
    },
    {
        "question": "What are the advantages of the Document Object Model?",
        "answer": "The tree structure makes the DOM easy to traverse, the structure is modifiable, and it is a standard of the W3C."
    },
    {
        "question": "What are the disadvantages of the Document Object Model?",
        "answer": "It can be resource intensive, slow, and may not be the best choice for all applications."
    },
    {
        "question": "What does the event object provide information about?",
        "answer": "The target element in which the even occurred, state of the keyboard keys, locaiton of the mouse cursor, and state of the mouse buttons."
    },
    {
        "question": "Describe event propagation through event capturing.",
        "answer": "The event propagates down through an element's ancestors to the target element."
    },
    {
        "question": "Describe event propagation through event bubbling.",
        "answer": "The event propagates up through an element's ancestors from the target element."
    },
    {
        "question": "What is the basic pattern that jQuery uses to manipulate elements?",
        "answer": "Select elements, manipulate elements, and return elements. $(selector).event(function() {...});"
    },

    {
        "question": "What is the role of XML?",
        "answer": "To describe the structure of semi-structured documents."
    },
    {
        "question": "What can an XML element contain?",
        "answer": "Text, attributes, other elements, or a combination of these."
    },
    {
        "question": "What does it mean for an XML document to be well-formed?",
        "answer": "The tags are case sensitive, each start tag has a corresponding end tag, tags are properly nested, attribute values must be quotes, and the document must have a root element."
    },
    {
        "question": "What are the two types of pre-defined structures that can be used for XML?",
        "answer": "Document Type Definition (DTD) and XML Schemas."
    },

    {
        "question": "What does AJAX do?",
        "answer": "Eliminates the need to reload a web page in order to get new data, and improves the interactive experience in web apps."
    },
    {
        "question": "Briefly describe how AJAX works.",
        "answer": "An event occurs in the web page, an XMLHttpRequest object is created, the object sends a request to the server, the server processes the request, and the server sends a response back to the web page. The web page then updates."
    },
    {
        "question": "What are some XMLHttpRequest properties?",
        "answer": "onreadystatechange, readyState, responseText, status, responseXML."
    },
    {
        "question": "What are some XMLHttpRequest methods?",
        "answer": "open(), send(), setRequestHeader(), abort()."
    },

    {
        "question": "What is SAX?",
        "answer": "Simple API for XML, a way to sequentially parse XML documents."
    },

    {
        "question": "What happens when a user agent is asked to send a message?",
        "answer": "The URL is turned into an IP address, a TCP connection is opened on a port as that IP address, and a request is made using a specific URL scheme and sent using that TCP connection."
    },
    {
        "question": "What are some common response and request messaging protocols?",
        "answer": "HTTP, HTTPS, FILE, FTP, MAILTO, NEWS, TELNET."
    },
    {
        "question": "What is HTTP used for?",
        "answer": "It is used to deliver virtually all files and other data using 8 bit characters, and also to transmit resources."
    },
    {
        "question": "When should GET and POST be used?",
        "answer": "GET should be used when the request is idempotent, and POST should be used when the request is not idempotent."
    },
    {
        "question": "How can statelessness be dealt with?",
        "answer": "By using cookies on the client side, hidden variables on the server side, and URL encoding."
    },
    
    {
        "question": "What is the Model View Controller?",
        "answer": "A software architectural design pattern."
    },
    {
        "question": "In an MVC, what does the 'model' do?",
        "answer": "Represents the application data and the domain logic. Notifies the view of changes and enables the view to query the model."
    },
    {
        "question": "In an MVC, what does the 'view' do?",
        "answer": "The view is a visual representation of its model and acts as a presentation filter."
    },
    {
        "question": "In an MVC, what does the 'controller' do?",
        "answer": "It defines app behaviour and is the link between a user and the system."
    },
    {
        "question": "What are the advantages of the Model View Controller pattern?",
        "answer": "Easy maintenance, reusable code, enforces logical separation of concerns."
    },
    {
        "question": "What are the disadvantages of the Model View Controller pattern?",
        "answer": "Initial overheads splitting up concerns, debugging can be tricky, and it requires developer to understand patterns."
    },

    {
        "question": "What are some characteristics of a Web Application Framework?",
        "answer": "Inversion of control, extensibility, and non-modifiable framework code."
    },
    {
        "question": "What are some advantages of using a Web Application Framework?",
        "answer": "Rapid development, reduces boiler plate code, and increases security."
    },
    {
        "question": "What are some disadvantages of using a Web Application Framework?",
        "answer": "Can introduce code bloat, levels of abstraction generally introduce performance penalties, and can be poorly documented."
    },
    {
        "question": "What is some common Web Application Framework functionality?",
        "answer": "Web template system, caching, security, URL mapping, automatic configuration, form management."
    }
]