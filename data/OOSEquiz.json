[
    {
        "question": "What is a happy test?",
        "answer": "When there are clean cases that go through the system."
    },
    {
        "question": "What is a fail scenario?",
        "answer": "Test scenarios where things go wrong."
    },
    {
        "question": "What is functionality testing?",
        "answer": "Testing the function itself."
    },
    {
        "question": "What is usability testing?",
        "answer": "Testing the ease of use of the application."
    },
    {
        "question": "What is security / penetration testing?",
        "answer": "Testing if the system is secure and can survive attacks."
    },
    {
        "question": "What is performance / efficiency testing?",
        "answer": "Testing how fast and good the memory of the system is."
    },
    {
        "question": "What is portability testing?",
        "answer": "Testing if the application can be deployed on different browsers, OS, web, or mobile applications."
    },
    {
        "question": "What are some examples of chaos engineering?",
        "answer": "Server shutdowns, latency injections, resource exhaustion."
    },
    {
        "question": "What is the need for accessibility testing?",
        "answer": "Some customers / users may have disabilities like colour blindness, hearing impairments, etc."
    },
    {
        "question": "Briefly describe A / B testing.",
        "answer": "It is a method of comparing two versions of an application to see which performs better."
    },
    {
        "question": "What is the definition of coupling?",
        "answer": "Coupling is the degree of interdependence between software modules."
    },
    {
        "question": "What is the definition of cohesion?",
        "answer": "Cohesion is the degree to which the elements inside a module belong together."
    },
    {
        "question": "What are the different types of coupling?",
        "answer": "Content coupling, common coupling, external coupling, control coupling, stamp coupling, data coupling."
    },
    {
        "question": "What is content coupling?",
        "answer": "When one module uses code from another."
    },
    {
        "question": "What is common coupling?",
        "answer": "When several modules have access to the same global data."
    },
    {
        "question": "What is external coupling?",
        "answer": "When several modules have access to an externally imposed data format."
    },
    {
        "question": "What is control coupling?",
        "answer": "When one module must control the flow of another module."
    },
    {
        "question": "What is stamp coupling?",
        "answer": "When several modules have access to a shared data structure."
    },
    {
        "question": "What is data coupling?",
        "answer": "When modules share data through parameters."
    },
    {
        "question": "What is the impact of high coupling?",
        "answer": "Delay time to market, additional testing and environment setup, additional risk of impact, lack of visibility."
    },
    {
        "question": "What are the different types of potential bugs?",
        "answer": "Software doesn't do something that the specification says it should do, software does something that the specification says it shouldn't do, software does something that the specification doesn't mention, software doesn't do something that the specification doesn't mention but it should, software is difficult to understand or slow, or otherwise not right."
    },
    {
        "question": "What is the number one cause of software bugs?",
        "answer": "The specification."
    },
    {
        "question": "Why is specification the number one cause of software bugs?",
        "answer": "It may be unwritten or incomplete, ambiguous, constantly changing, or not communicated to the development team."
    },
    {
        "question": "What is the second leading cause of software bugs?",
        "answer": "Bad design."
    },
    {
        "question": "Why is bad design a leading cause of software bugs?",
        "answer": "Due to inappropriate modelling, lack of modelling tools, or time to market pressures."
    },
    {
        "question": "What is the third leading cause of software bugs?",
        "answer": "Bad coding."
    },
    {
        "question": "Why is bad coding a leading cause of software bugs?",
        "answer": "Due to software complexity, poor documentation, limited time, or programmer skills."
    },
    {
        "question": "What are some typical coding mistakes?",
        "answer": "Syntax errors, improper use of class library, override error, scope boundary error, algorithm error, missing operation, need refactoring, unnecessary code."
    },
    {
        "question": "What is software reliability measured with?",
        "answer": "Mean Time Between Failures (MBTF)."
    },
    {
        "question": "What is the bug tracking workflow?",
        "answer": "A tester finds a bug and reports it, the bug is assigned to a manager for initial triage, the manager resolves it or assigns it to a developer, the resolved bug is returned to the tester, and the tester either closes the bug or reopens with additional information."
    },
    {
        "question": "What is bug triaging?",
        "answer": "The process of assigning a bug to the most appropriate / capable developer to address it."
    },
    {
        "question": "What does an effective bug triage require?",
        "answer": "Knowledge about the system / project, descriptive bug reports, good rates of reporting bugs, and coordination with developers."
    },
    {
        "question": "What is a bug pattern?",
        "answer": "Bug patterns are recurring relations between signalled errors and underlying bugs in a program."
    },
    {
        "question": "Briefly describe object des-serialisation.",
        "answer": "Serialisation and de-serialisation is the process of turning objects into byte streams and back again."
    },
    {
        "question": "Briefly describe trust boundary violations.",
        "answer": "Trust boundary violations occur when data crosses a trust boundary and is used in a context that assumes it is trustworthy."
    },
    {
        "question": "What are the categories of a bug pattern?",
        "answer": "Correctness of the program, not conforming to best practices, malicious code vulnerability, multithreaded correctness, performance, security."
    },
    {
        "question": "What is debugging?",
        "answer": "The process of using the symptoms of a bug to find and fix its underlying cause in code, design, or specification."
    },
    {
        "question": "What is the soundness of a static analysis program?",
        "answer": "An alert is raised whenever there is a bug in the code."
    },
    {
        "question": "What is the precision of a static analysis program?",
        "answer": "Every bug alert in the program is actually a bug."
    },
    {
        "question": "What are some consequences of a static analysis program designed to overestimate possible program behaviours?",
        "answer": "The program never misses a bug, but may report some false warnings. Analysis may report so many false warnings, that real bugs cannot be found."
    },
    {
        "question": "What are some consequences of a static analysis program designed to underestimate possible program behaviours?",
        "answer": "The program never reports a false warning, but may miss some bugs. Analysis may miss so many bugs that the program is not useful."
    },
    {
        "question": "What are some consequences of a static analysis program designed to make balanced approximations?",
        "answer": "It is neither sound not precise. It misses some real bugs and reports some false warnings, but will be useful."
    },
    {
        "question": "What is a class diagram?",
        "answer": "A blueprint or model of the system that you are building."
    },
    {
        "question": "What is used to produce a class diagram?",
        "answer": "Unified Model Language (UML)."
    },
    {
        "question": "In a class diagram, what does a + and - symbol represent, next to an attribute or method?",
        "answer": "+ represents public, - represents private."
    },
    {
        "question": "In a class diagram, what does a hollow pointed arrow between two classes indicate?",
        "answer": "A hollow pointed arrow is commonly used to indicate a direct association. It signifies that one class inherits from the other."
    },
    {
        "question": "In a class diagram, how can multiplicity be represented?",
        "answer": "By using a number or range of numbers next to the association line."
    },
    {
        "question": "In a class diagram, what does a solid line with a hollow diamond at one end represent?",
        "answer": "Aggregation. This is when one class holds a collection of another."
    },
    {
        "question": "In a class diagram, what does a solid line with a solid diamond at one end represent?",
        "answer": "Composition. This is when one class contains another, and the contained object cannot exist outside of it."
    },
    {
        "question": "Why is clean code and refactoring important?",
        "answer": "Easier to follow, better for team onboarding, more time spent on new features, less time spent on debugging, less time spent on maintenance."
    },
    {
        "question": "What do the letters in the acronym SOLID stand for?",
        "answer": "Single Responsibility Principle, Open/Closed Principle, Liskov Substitution Principle, Interface Segregation Principle, Dependency Inversion Principle."
    },
    {
        "question": "What is the Single Responsibility Principle?",
        "answer": "A class should do one and only one thing."
    },
    {
        "question": "What is the Open/Closed Principle?",
        "answer": "A class should be open for extension, but closed for modification."
    },
    {
        "question": "Briefly explain the DRY principle.",
        "answer": "Don't Repeat Yourself. Write small, reusable units and use these. Achieved through modularisation."
    },
    {
        "question": "What effect does the DRY principle have on code?",
        "answer": "Saves time and effort, easier to maintain, reduces the possibility of bugs."
    },
    {
        "question": "When should code be refactored?",
        "answer": "When implementing new functionality, correcting a defect, doing a code review, or when the code is hard to understand."
    },
    {
        "question": "What are some refactoring smells?",
        "answer": "Duplicate code, long methods, switch statements, alternative classes with different interfaces, inappropriate intimacy."
    },
    {
        "question": "What are some common coding styles?",
        "answer": "Single developer, code review, pair programming, mob programming, test driven development."
    },
    {
        "question": "Briefly describe single programming.",
        "answer": "A single person writes, reviews, tests, and deploys the code."
    },
    {
        "question": "Briefly describe code review.",
        "answer": "One developer writes the code, and one or more other developers review the code and give feedback."
    },
    {
        "question": "What are some advantages of code review?",
        "answer": "Highlights mistakes, avoids duplication, increases shared knowledge."
    },
    {
        "question": "What are some disadvantages of code review?",
        "answer": "Takes time, there is animosity, can cause blame culture and decrease team morale."
    },
    {
        "question": "Briefly describe pair programming.",
        "answer": "One driver creates and types the code, while one observer watches and looks for mistakes, and discusses points. Roles are switched regularly."
    },
    {
        "question": "What are some advantages of pair programming?",
        "answer": "There is shared knowledge, there is no single point of failure, and it improves code quality."
    },
    {
        "question": "What are some disadvantages of pair programming?",
        "answer": "It takes longer to develop with discussions, and can cause disagreements."
    },
    {
        "question": "Briefly describe mob programming.",
        "answer": "One driver creates and types the code, while multiple observers look for mistakes and discuss points. Roles are switched regularly."
    },
    {
        "question": "Briefly describe test driven development.",
        "answer": "Write tests, tests fail, write code, tests pass, refactor, repeat."
    },
    {
        "question": "What can doubling be used for?",
        "answer": "To read or write to a file / database, or for calls to a web service, other application, or an external library."
    },
    {
        "question": "What is mocking?",
        "answer": "Mocking is the act of creating a fake object that simulates the behaviour of a real object."
    },
    {
        "question": "What are the benefits of mocking?",
        "answer": "It can speed up continuous integration testing, help receive faster feedback, remove dependencies on input and output and on external applications."
    },
    {
        "question": "What is the difference between spying and mocking?",
        "answer": "Mocking creates a fake object, while spying uses a real object."
    },
    {
        "question": "Briefly describe scope.",
        "answer": "Scope establishes the high level description of the system you are building."
    },
    {
        "question": "What is a prototype?",
        "answer": "A prototype is an early representation of the system that is discarded after it is used to gather information."
    },
    {
        "question": "What are the classifications of prototypes?",
        "answer": "High / low fidelity and functional / non-functional."
    },
    {
        "question": "What are the different ways of gathering information in a survey format?",
        "answer": "Likert scale, categorical, true / false, closed question, open ended."
    },
    {
        "question": "What are the benefits of a survey?",
        "answer": "Easy to compare with other participants, consistency, large scale, and can look at statistics for closed questions."
    },
    {
        "question": "What are the drawbacks of a survey?",
        "answer": "No follow-up for lack of detail, less accountability."
    },
    {
        "question": "What is a structured interview?",
        "answer": "A fixed list of questions that are asked in the same order to all participants."
    },
    {
        "question": "What are the benefits of a structured interview?",
        "answer": "Consistency in responses, allows for easy comparison with other participants, and the interviewer does not need to be skilled."
    },
    {
        "question": "What are the drawbacks of a structured interview?",
        "answer": "No follow-up for lack of detail, can be boring."
    },
    {
        "question": "What is an unstructured interview?",
        "answer": "Open questions, with no set list."
    },
    {
        "question": "What are the benefits of an unstructured interview?",
        "answer": "Can follow-up for lack of detail, and can learn information that you did not know you needed to know."
    },
    {
        "question": "What are the drawbacks of an unstructured interview?",
        "answer": "Difficult to compare with other participants, no consistency in data gathered, and the interviewer needs to be skilled."
    },
    {
        "question": "What is a focus group?",
        "answer": "A small group discussion with 2 facilitators and 3-8 stakeholders."
    },
    {
        "question": "What are the benefits of a focus group?",
        "answer": "Promotes co-questioning where stakeholders can ask each other questions that the facilitators don't know to ask."
    },
    {
        "question": "What are the three types of design patterns?",
        "answer": "Creational, structural, behavioural."
    },
    {
        "question": "What are creational design patterns used for?",
        "answer": "They are used to manage the instantiation of objects."
    },
    {
        "question": "What are structural design patterns used for?",
        "answer": "They are used to organise how groups of classes interact with one another."
    },
    {
        "question": "What are behavioural design patterns used for?",
        "answer": "They are used to manage common patterns of communication to an object, respecting the open / closed principle."
    },
    {
        "question": "What are some advantages of design patterns?",
        "answer": "They create a common language, you can say more with less, they help to stay in design longer, and help reduce misunderstandings."
    },
    {
        "question": "Briefly describe the strategy design pattern.",
        "answer": "The strategy pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. It allows the algorithm to vary independently from the client that uses it."
    },
    {
        "question": "What are some pros of the strategy design pattern?",
        "answer": "It allows for easy switching between algorithms, isolating the implementation details of an algorithm, and replaces inheritance with composition."
    },
    {
        "question": "How does the strategy design pattern apply the open / closed principle?",
        "answer": "It allows for easily introducing new strategies without having to change the context."
    },
    {
        "question": "Briefly describe the iterator design pattern.",
        "answer": "The iterator pattern provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation."
    },
    {
        "question": "What are some pros of the iterator design pattern?",
        "answer": "It adheres to the single responsibility principle, as well as the open / closed principle."
    },
    {
        "question": "Briefly describe the composite design pattern.",
        "answer": "The composite pattern allows you to compose objects into tree structures to represent part-whole hierarchies. It lets clients treat individual objects and compositions of objects uniformly."
    },
    {
        "question": "What are some pros of the composite design pattern?",
        "answer": "It allows for working with complex tree structures more conveniently, and adheres to the open / closed principle."
    },
    {
        "question": "Briefly describe the observer design pattern.",
        "answer": "The observer pattern defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically."
    },
    {
        "question": "What are some pros of the observer design pattern?",
        "answer": "It adheres to the open / closed principle, and allows for establishing relations between objects at runtime."
    },
    {
        "question": "What are the three main methods in an Observerable class?",
        "answer": "registerObserver(), removeObserver(), notifyObservers()."
    },
    {
        "question": "Briefly describe the singleton design pattern.",
        "answer": "The singleton pattern ensures that a class has only one instance and provides a global point of access to it."
    },
    {
        "question": "What is the main attribute and method in a singleton class?",
        "answer": "static uniqueInstance, static getInstance()."
    },
    {
        "question": "In a singleton class, how can we protect against multiple threads?",
        "answer": "Using a synchronised block to create the unique instance."
    },
    {
        "question": "Briefly describe the factory method design pattern.",
        "answer": "The factory method pattern defines an interface for creating objects, but lets subclasses decide which class to instantiate. It defers instantiation to subclasses."
    },
    {
        "question": "What are some pros of the factory method design pattern?",
        "answer": "It adheres to the single responsibility principle, as well as the open / closed principle. It also avoids tight coupling between the creator and concrete products."
    },
    {
        "question": "Briefly describe the state design pattern.",
        "answer": "The state pattern allows an object to alter its behaviour when its internal state changes. The object will appear to change its class."
    },
    {
        "question": "What are some pros of the state design pattern?",
        "answer": "It adheres to the single responsibility principle, as well as the open / closed principle. It also simplifies the code of the context by removing the conditional statements."
    },
    {
        "question": "Briefly describe the decorator design pattern.",
        "answer": "The decorator pattern attaches additional responsibilities to an object dynamically. It provides a flexible alternative to subclassing for extending functionality."
    },
    {
        "question": "What are some pros of the decorator design pattern?",
        "answer": "It allows extension of an object's behaviour without making a new subclass, and adheres to the single responsibility principle. It also allows for adding or removing responsibilities from an object at runtime."
    },
    {
        "question": "What is software engineering?",
        "answer": "Software engineering is the application of engineering principles to the design, development, maintenance, testing, and evaluation of software."
    },
    {
        "question": "What are the main phases of the software development lifecycle (SDLC)?",
        "answer": "Requirements analysis, design, implementation (coding), testing, deployment, and maintenance."
    },
    {
        "question": "What is the difference between verification and validation?",
        "answer": "Verification checks whether the software meets specifications; validation checks whether the software meets the user's needs."
    },
    {
        "question": "What is a requirement?",
        "answer": "A requirement is a statement of what the system should do or a property it must have."
    },
    {
        "question": "What is the difference between functional and non-functional requirements?",
        "answer": "Functional requirements specify what the system should do; non-functional requirements specify how the system should behave (e.g. performance, usability, reliability)."
    },
    {
        "question": "What is requirements elicitation?",
        "answer": "The process of gathering requirements from stakeholders through interviews, surveys, observation, and document analysis."
    },
    {
        "question": "What is a stakeholder in software engineering?",
        "answer": "Anyone who is affected by or has an interest in the software system, such as users, customers, developers, and managers."
    },
    {
        "question": "What is a use case?",
        "answer": "A description of a system’s behavior as it responds to a request from an actor (user or another system)."
    },
    {
        "question": "What is a user story?",
        "answer": "A simple, informal description of a software feature from an end-user perspective, often following the format: 'As a [user], I want [feature] so that [reason]'."
    },
    {
        "question": "What is a software process model?",
        "answer": "A structured set of activities required to develop a software system, such as waterfall, agile, or spiral models."
    },
    {
        "question": "What is the waterfall model?",
        "answer": "A linear software development process in which progress flows sequentially through requirements, design, implementation, verification, and maintenance."
    },
    {
        "question": "What is the agile methodology?",
        "answer": "An iterative and incremental approach to software development that emphasizes flexibility, collaboration, and customer feedback."
    },
    {
        "question": "What is Scrum?",
        "answer": "A popular agile framework that organizes work into sprints, with defined roles such as Scrum Master and Product Owner."
    },
    {
        "question": "What is a sprint in Scrum?",
        "answer": "A fixed-length iteration, typically 1-4 weeks, during which a potentially shippable product increment is developed."
    },
    {
        "question": "What is a product backlog?",
        "answer": "An ordered list of features, enhancements, bug fixes, and technical tasks required for a product."
    },
    {
        "question": "What is a sprint retrospective?",
        "answer": "A meeting held at the end of a sprint to reflect on what went well, what could be improved, and how to make the next sprint more effective."
    },
    {
        "question": "What is continuous integration?",
        "answer": "A development practice where code changes are automatically built, tested, and merged into a shared repository several times a day."
    },
    {
        "question": "What is version control?",
        "answer": "A system that records changes to files over time so that specific versions can be recalled later; examples include Git and Subversion."
    },
    {
        "question": "What is a pull request (or merge request)?",
        "answer": "A request to merge code changes from one branch into another, often reviewed by other team members before acceptance."
    },
    {
        "question": "What is code review?",
        "answer": "A process where developers examine each other's code for mistakes, style, and adherence to standards before merging."
    },
    {
        "question": "What is refactoring?",
        "answer": "The process of restructuring existing code without changing its external behavior to improve readability, maintainability, or performance."
    },
    {
        "question": "What is technical debt?",
        "answer": "The implied cost of additional rework caused by choosing an easy or limited solution now instead of a better approach that would take longer."
    },
    {
        "question": "What is a design document?",
        "answer": "A written description of the architecture, components, interfaces, and data for a system to satisfy specified requirements."
    },
    {
        "question": "What is a sequence diagram?",
        "answer": "A UML diagram that shows how objects interact in a particular scenario of a use case, focusing on the order of messages exchanged."
    },
    {
        "question": "What is a state diagram?",
        "answer": "A UML diagram that shows the states of an object and transitions between those states based on events."
    },
    {
        "question": "What is a deployment diagram?",
        "answer": "A UML diagram that shows the physical arrangement of hardware and software in a system."
    },
    {
        "question": "What is a component diagram?",
        "answer": "A UML diagram that shows the organization and dependencies among a set of components."
    },
    {
        "question": "What is the purpose of documentation in software engineering?",
        "answer": "To provide information for users, developers, and maintainers about how the system works and how to use or modify it."
    },
    {
        "question": "What is regression testing?",
        "answer": "Testing existing software functionality to ensure that new changes have not introduced bugs."
    },
    {
        "question": "What is unit testing?",
        "answer": "Testing individual units or components of a software system in isolation."
    },
    {
        "question": "What is integration testing?",
        "answer": "Testing the combination of multiple software modules as a group to ensure they work together."
    },
    {
        "question": "What is system testing?",
        "answer": "Testing the complete and integrated software system to verify that it meets the specified requirements."
    },
    {
        "question": "What is acceptance testing?",
        "answer": "Testing conducted to determine whether the system satisfies the acceptance criteria and is ready for delivery to the customer."
    },
    {
        "question": "What is black-box testing?",
        "answer": "Testing software without knowledge of its internal implementation, focusing on inputs and expected outputs."
    },
    {
        "question": "What is white-box testing?",
        "answer": "Testing based on knowledge of the internal logic and structure of the code."
    },
    {
        "question": "What is code coverage?",
        "answer": "A measure of how much of the source code is executed during testing."
    },
    {
        "question": "What is a mock object?",
        "answer": "A simulated object that mimics the behavior of real objects in controlled ways, used in testing."
    },
    {
        "question": "What is the difference between a bug and a defect?",
        "answer": "A bug is an error found before the product is released; a defect is an error found after release."
    },
    {
        "question": "What is the difference between alpha and beta testing?",
        "answer": "Alpha testing is performed by internal staff before release; beta testing is performed by external users after release but before final delivery."
    },
    {
        "question": "What is project management in software engineering?",
        "answer": "The process of planning, organizing, and managing resources to bring about the successful completion of specific software project goals and objectives."
    },
    {
        "question": "What is a Gantt chart?",
        "answer": "A type of bar chart that illustrates a project schedule, showing tasks, durations, and dependencies."
    },
    {
        "question": "What is risk management?",
        "answer": "The process of identifying, assessing, and controlling risks throughout the software project."
    },
    {
        "question": "What is a milestone in project management?",
        "answer": "A significant event or point in time within a project, often marking the completion of a major phase or deliverable."
    },
    {
        "question": "What is configuration management?",
        "answer": "The discipline of tracking and controlling changes in software, including version control and build management."
    },
    {
        "question": "What is software maintenance?",
        "answer": "The process of modifying a software application after delivery to correct faults, improve performance, or adapt to a changed environment."
    },
    {
        "question": "What is legacy code?",
        "answer": "Code inherited from an earlier version of the system, often lacking documentation or modern design practices."
    },
    {
        "question": "What is software quality assurance (SQA)?",
        "answer": "A set of activities for ensuring quality in software engineering processes and products."
    },
    {
        "question": "What is the ISO 9001 standard?",
        "answer": "An international standard for quality management systems, including those for software development."
    },
    {
        "question": "What is the IEEE?",
        "answer": "The Institute of Electrical and Electronics Engineers, a professional association that sets standards for software engineering and other fields."
    },
    {
        "question": "What is professional ethics in software engineering?",
        "answer": "The principles and standards that guide behavior and decision-making for software engineers, including honesty, fairness, and respect for intellectual property."
    },
    {
        "question": "What is intellectual property in software?",
        "answer": "Legal rights that protect creations of the mind, such as software code, documentation, and algorithms."
    },
    {
        "question": "What is open source software?",
        "answer": "Software whose source code is made freely available for anyone to use, modify, and distribute."
    },
    {
        "question": "What is a software license?",
        "answer": "A legal agreement that specifies how software can be used, modified, and distributed."
    },
    {
        "question": "What is the difference between GPL and MIT licenses?",
        "answer": "GPL requires derivative works to also be open source (copyleft); MIT is more permissive, allowing proprietary use."
    },
    {
        "question": "What is GDPR and how does it relate to software engineering?",
        "answer": "The General Data Protection Regulation is a European law regulating data protection and privacy, affecting how software systems handle personal data."
    },
    {
        "question": "What is accessibility in software?",
        "answer": "The design of software so that it can be used by people with disabilities."
    },
    {
        "question": "What is usability?",
        "answer": "The ease with which users can learn and use a software product."
    },
    {
        "question": "What is a persona in user-centered design?",
        "answer": "A fictional character created to represent a user type that might use a site, brand, or product."
    },
    {
        "question": "What is a wireframe?",
        "answer": "A visual guide that represents the skeletal framework of a software interface."
    },
    {
        "question": "What is the Model-View-Controller (MVC) pattern?",
        "answer": "An architectural pattern that separates an application into three main components: the model (data), the view (UI), and the controller (logic)."
    },
    {
        "question": "What is test-driven development (TDD)?",
        "answer": "A software development process where tests are written before code, and code is only written to pass the tests."
    },
    {
        "question": "What is pair programming?",
        "answer": "A software development technique in which two programmers work together at one workstation, one typing and the other reviewing."
    },
    {
        "question": "What is a code smell?",
        "answer": "A symptom in the code that may indicate a deeper problem, such as duplicated code or long methods."
    },
    {
        "question": "What is continuous deployment?",
        "answer": "A software release process in which code changes are automatically deployed to production after passing tests."
    },
    {
        "question": "What is DevOps?",
        "answer": "A set of practices that combines software development (Dev) and IT operations (Ops) to shorten the development lifecycle and provide continuous delivery."
    },
    {
        "question": "What is a microservice?",
        "answer": "An architectural style that structures an application as a collection of loosely coupled services, each implementing a business capability."
    },
    {
        "question": "What is a REST API?",
        "answer": "An application programming interface that follows Representational State Transfer architectural principles, using HTTP requests to access and manipulate data."
    },
    {
        "question": "What is a design pattern?",
        "answer": "A general, reusable solution to a commonly occurring problem within a given context in software design."
    },
    {
        "question": "What is a software prototype?",
        "answer": "An early, simplified version of a software system used to demonstrate concepts and gather feedback."
    },
    {
        "question": "What is a burn-down chart?",
        "answer": "A graphical representation of work left to do versus time, used in agile project management."
    },
    {
        "question": "What is the difference between a process and a thread?",
        "answer": "A process is an independent program in execution; a thread is a smaller unit of execution within a process."
    },
    {
        "question": "What is concurrency in software?",
        "answer": "The ability of a system to execute multiple tasks simultaneously."
    },
    {
        "question": "What is deadlock?",
        "answer": "A situation in concurrent programming where two or more processes are unable to proceed because each is waiting for the other to release a resource."
    },
    {
        "question": "What is a race condition?",
        "answer": "A defect that occurs when the outcome of a process depends on the sequence or timing of uncontrollable events."
    },
    {
        "question": "What is a critical section?",
        "answer": "A part of a program that accesses shared resources and must not be executed by more than one thread at a time."
    },
    {
        "question": "What is a mutex?",
        "answer": "A mutual exclusion object that prevents multiple threads from accessing a resource simultaneously."
    },
    {
        "question": "What is a semaphore?",
        "answer": "A synchronization primitive used to control access to a common resource in concurrent programming."
    },
    {
        "question": "What is the difference between black-box and white-box testing?",
        "answer": "Black-box testing tests the system without knowledge of its internals; white-box testing tests with knowledge of the internal structure."
    },
    {
        "question": "What is the difference between validation and verification?",
        "answer": "Validation checks if the system meets user needs; verification checks if the system meets specifications."
    },
    {
        "question": "What is a software metric?",
        "answer": "A measure used to quantify the characteristics of software, such as complexity, size, or quality."
    },
    {
        "question": "What is cyclomatic complexity?",
        "answer": "A software metric that measures the number of linearly independent paths through a program's source code."
    },
    {
        "question": "What is the main goal of software engineering?",
        "answer": "To produce high-quality software that is reliable, maintainable, and meets user requirements within budget and time constraints."
    }
]

