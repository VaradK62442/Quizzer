[
    {
        "question": "What is a happy test?",
        "answer": "When there are clean cases that go through the system."
    },
    {
        "question": "What is a fail scenario?",
        "answer": "Test scenarios where things go wrong."
    },
    {
        "question": "What is functionality testing?",
        "answer": "Testing the function itself."
    },
    {
        "question": "What is usability testing?",
        "answer": "Testing the ease of use of the application."
    },
    {
        "question": "What is security / penetration testing?",
        "answer": "Testing if the system is secure and can survive attacks."
    },
    {
        "question": "What is performance / efficiency testing?",
        "answer": "Testing how fast and good the memory of the system is."
    },
    {
        "question": "What is portability testing?",
        "answer": "Testing if the application can be deployed on different browsers, OS, web, or mobile applications."
    },
    {
        "question": "What are some examples of chaos engineering?",
        "answer": "Server shutdowns, latency injections, resource exhaustion."
    },
    {
        "question": "What is the need for accessibility testing?",
        "answer": "Some customers / users may have disabilities like colour blindness, hearing impairments, etc."
    },
    {
        "question": "Briefly describe A / B testing.",
        "answer": "It is a method of comparing two versions of an application to see which performs better."
    },

    {
        "question": "What is the definition of coupling?",
        "answer": "Coupling is the degree of interdependence between software modules."
    },
    {
        "question": "What is the definition of cohesion?",
        "answer": "Cohesion is the degree to which the elements inside a module belong together."
    },
    {
        "question": "What are the different types of coupling?",
        "answer": "Content coupling, common coupling, external coupling, control coupling, stamp coupling, data coupling."
    },
    {
        "question": "What is content coupling?",
        "answer": "When one module uses code from another."
    },
    {
        "question": "What is common coupling?",
        "answer": "When several modules have access to the same global data."
    },
    {
        "question": "What is external coupling?",
        "answer": "When several modules have access to an externally imposed data format."
    },
    {
        "question": "What is control coupling?",
        "answer": "When one module must control the flow of another module."
    },
    {
        "question": "What is stamp coupling?",
        "answer": "When several modules have access to a shared data structure."
    },
    {
        "question": "What is data coupling?",
        "answer": "When modules share data through parameters."
    },
    {
        "question": "What is the impact of high coupling?",
        "answer": "Delay time to market, additional testing and environment setup, additional risk of impact, lack of visibility."
    },

    {
        "question": "What are the different types of potential bugs?",
        "answer": "Software doesn't do something that the specification says it should do, software does something that the specification says it shouldn't do, software does something that the specification doesn't mention, software doesn't do something that the specification doesn't mention but it should, software is difficult to understand or slow, or otherwise not right."
    },
    {
        "question": "What is the number one cause of software bugs?",
        "answer": "The specification."
    },
    {
        "question": "Why is specification the number one cause of software bugs?",
        "answer": "It may be unwritten or incomplete, ambiguous, constantly changing, or not communicated to the development team."
    },
    {
        "question": "What is the second leading cause of software bugs?",
        "answer": "Bad design."
    },
    {
        "question": "Why is bad design a leading cause of software bugs?",
        "answer": "Due to inappropriate modelling, lack of modelling tools, or time to market pressures."
    },
    {
        "question": "What is the third leading cause of software bugs?",
        "answer": "Bad coding."
    },
    {
        "question": "Why is bad coding a leading cause of software bugs?",
        "answer": "Due to software complexity, poor documentation, limited time, or programmer skills."
    },
    {
        "question": "What are some typical coding mistakes?",
        "answer": "Syntax errors, improper use of class library, override error, scope boundary error, algorithm error, missing operation, need refactoring, unnecessary code."
    },
    {
        "question": "What is software reliability measured with?",
        "answer": "Mean Time Between Failures (MBTF)."
    },
    {
        "question": "What is the bug tracking workflow?",
        "answer": "A tester finds a bug and reports it, the bug is assigned to a manager for initial triage, the manager resolves it or assigns it to a developer, the resolved bug is returned to the tester, and the tester either closes the bug or reopens with additional information."
    },
    {
        "question": "WHat is bug triaging?",
        "answer": "The process of assigning a bug to the most appropriate / capable developer to address it."
    },
    {
        "question": "What does an effective bug triage require?",
        "answer": "Knowledge about the system / project, descriptive bug reports, good rates of reporting bugs, and coordination with developers."
    },

    {
        "question": "What is a bug pattern?",
        "answer": "Bug patterns are recurring relations between signalled errors and underlying bugs in a program."
    },
    {
        "question": "Briefly describe object des-serialisation.",
        "answer": "Serialisation and de-serialisation is the process of turning objects into byte streams and back again."
    },
    {
        "question": "Briefly describe trust boundary violations.",
        "answer": "Trust boundary violations occur when data crosses a trust boundary and is used in a context that assumes it is trustworthy."
    },
    {
        "question": "What are the categories of a bug pattern?",
        "answer": "Correctness of the program, not conforming to best practices, malicious code vulnerability, multithreaded correctness, performance, security."
    },
    {
        "question": "What is debugging?",
        "answer": "The process of using the symptoms of a bug to find and fix its underlying cause in code, design, or specification."
    },
    {
        "question": "What is the soundness of a static analysis program?",
        "answer": "An alert is raised whenever there is a bug in the code."
    },
    {
        "question": "What is the precision of a static analysis program?",
        "answer": "Every bug alert in the program is actually a bug."
    },
    {
        "question": "What are some consequences of a static analysis program designed to overestimate possible program behaviours?",
        "answer": "The program never misses a bug, but may report some false warnings. Analysis may report so many false warnings, that real bugs cannot be found."
    },
    {
        "question": "What are some consequences of a static analysis program designed to underestimate possible program behaviours?",
        "answer": "The program never reports a false warning, but may miss some bugs. Analysis may miss so many bugs that the program is not useful."
    },
    {
        "question": "What are some consequences of a static analysis program designed to make balanced approximations?",
        "answer": "It is neither sound not precise. It misses some real bugs and reports some false warnings, but will be useful."
    }
]